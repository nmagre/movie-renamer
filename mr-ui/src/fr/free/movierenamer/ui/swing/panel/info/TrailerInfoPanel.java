/*
 * Copyright (C) 2013 duffy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package fr.free.movierenamer.ui.swing.panel.info;

import fr.free.movierenamer.info.MovieInfo;
import fr.free.movierenamer.info.TrailerInfo;
import fr.free.movierenamer.scrapper.impl.trailer.TrailerAddictScrapper;
import fr.free.movierenamer.searchinfo.Trailer;
import fr.free.movierenamer.ui.utils.ImageUtils;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author duffy
 */
public class TrailerInfoPanel extends InfoPanel<MovieInfo> {

  private final DefaultListModel<Trailer> listModel;
  private TrailerInfo tinfo;

  /**
   * Creates new form TrailerPanel
   */
  public TrailerInfoPanel() {
    listModel = new DefaultListModel();
    initComponents();
    trailerList.setModel(listModel);
    trailerList.addListSelectionListener(createTrailerListListener());
  }

  public void addTrailers(List<Trailer> trailers) {
    for (Trailer trailer : trailers) {
      listModel.addElement(trailer);
    }

    if (!listModel.isEmpty()) {
      trailerList.setSelectedIndex(0);
    }
  }

  private ListSelectionListener createTrailerListListener() {
    return new ListSelectionListener() {
      @Override
      public void valueChanged(ListSelectionEvent lse) {
        if (!lse.getValueIsAdjusting()) {
          TrailerAddictScrapper scrapper = new TrailerAddictScrapper();
          try {
            tinfo = scrapper.fetchTrailerInfo((Trailer) trailerList.getSelectedValue());

          } catch (Exception ex) {
            Logger.getLogger(TrailerInfoPanel.class.getName()).log(Level.SEVERE, null, ex);
          }
        }
      }
    };
  }

  @Override
  public Icon getIcon() {
    return ImageUtils.MOVIE_16;
  }

  @Override
  public String getPanelName() {
    return "Trailer";// FIXME i18n
  }

  @Override
  public void clear() {
    listModel.clear();
  }

  @Override
  public void setInfo(MovieInfo info) {

  }

  @Override
  public MovieInfo getInfo() {
    return null;
  }

  @Override
  public PanelType getType() {
    return PanelType.TRAILER_INFO;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    trailerList = new com.alee.laf.list.WebList();
    webButton1 = new com.alee.laf.button.WebButton();

    trailerList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(trailerList);

    webButton1.setText("Play");
    webButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        webButton1ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(webButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(266, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(webButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE))
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void webButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webButton1ActionPerformed
    if (tinfo != null && tinfo.getStreamUrl() != null) {

    }
  }//GEN-LAST:event_webButton1ActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private com.alee.laf.list.WebList trailerList;
  private com.alee.laf.button.WebButton webButton1;
  // End of variables declaration//GEN-END:variables

}
